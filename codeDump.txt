    /*
        @Bean
        public ReactiveClientRegistrationRepository clientRegistrations() {
            ClientRegistration clientRegistration = ClientRegistration
                    .withRegistrationId("message")
                    .clientId("client")
                    .clientSecret("adeec876-86bb-4194-8953-8233ec20d2fe")
                    .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
                    .tokenUri("http://localhost:8081/oauth/token")
                    .redirectUriTemplate("http://localhost:8081/login")
                    .clientAuthenticationMethod(ClientAuthenticationMethod.BASIC)
                    .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
                    .build();
            return new InMemoryReactiveClientRegistrationRepository(clientRegistration);
        }

        @Bean
        public WebClient messageWebClient(
                ReactiveClientRegistrationRepository clientRegistrations,
                ServerOAuth2AuthorizedClientRepository serverOAuth2AuthorizedClientRepository,
                ClientHttpConnector clientHttpConnector
        ) {

            ServerOAuth2AuthorizedClientExchangeFilterFunction oauth =
                    new ServerOAuth2AuthorizedClientExchangeFilterFunction(
                            clientRegistrations,
                            new UnAuthenticatedServerOAuth2AuthorizedClientRepository());

            oauth.setDefaultClientRegistrationId("message");

            return WebClient.builder()
                    .baseUrl(MESSAGE_BASE_URL)
                    .clientConnector(clientHttpConnector)
                    .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                    .defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)
                    .filter(oauth)
                    .filter(logRequest())
                    .build();
        }
    */